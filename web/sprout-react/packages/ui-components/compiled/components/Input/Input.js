import { __assign, __makeTemplateObject, __read, __rest } from "tslib";
import React from 'react';
import { css, cx } from 'emotion';
import { getFocusStyle, sharedInputStyle } from '../Forms/commonStyles';
import { stylesFactory, useTheme } from '../../themes';
import { Icon } from '../Icon/Icon';
import { useClientRect } from '../../utils/useClientRect';
export var getInputStyles = stylesFactory(function (_a) {
    var theme = _a.theme, _b = _a.invalid, invalid = _b === void 0 ? false : _b, width = _a.width;
    var palette = theme.palette, colors = theme.colors;
    var borderRadius = theme.border.radius.sm;
    var height = theme.spacing.formInputHeight;
    var prefixSuffixStaticWidth = '28px';
    var prefixSuffix = css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    position: absolute;\n    top: 0;\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: ", ";\n    height: 100%;\n    /* Min width specified for prefix/suffix classes used outside React component*/\n    min-width: ", ";\n    color: ", ";\n  "], ["\n    position: absolute;\n    top: 0;\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-grow: 0;\n    flex-shrink: 0;\n    font-size: ", ";\n    height: 100%;\n    /* Min width specified for prefix/suffix classes used outside React component*/\n    min-width: ", ";\n    color: ", ";\n  "])), theme.typography.size.md, prefixSuffixStaticWidth, theme.colors.textWeak);
    return {
        // Wraps inputWrapper and addons
        wrapper: cx(css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n        label: input-wrapper;\n        display: flex;\n        width: ", ";\n        height: ", "px;\n        border-radius: ", ";\n        &:hover {\n          > .prefix,\n          .suffix,\n          .input {\n            border-color: ", ";\n          }\n\n          // only show number buttons on hover\n          input[type='number'] {\n            -moz-appearance: number-input;\n            -webkit-appearance: number-input;\n            appearance: textfield;\n          }\n\n          input[type='number']::-webkit-inner-spin-button,\n          input[type='number']::-webkit-outer-spin-button {\n            -webkit-appearance: inner-spin-button !important;\n            opacity: 1;\n          }\n        }\n      "], ["\n        label: input-wrapper;\n        display: flex;\n        width: ", ";\n        height: ", "px;\n        border-radius: ", ";\n        &:hover {\n          > .prefix,\n          .suffix,\n          .input {\n            border-color: ", ";\n          }\n\n          // only show number buttons on hover\n          input[type='number'] {\n            -moz-appearance: number-input;\n            -webkit-appearance: number-input;\n            appearance: textfield;\n          }\n\n          input[type='number']::-webkit-inner-spin-button,\n          input[type='number']::-webkit-outer-spin-button {\n            -webkit-appearance: inner-spin-button !important;\n            opacity: 1;\n          }\n        }\n      "])), width ? 8 * width + "px" : '100%', height, borderRadius, invalid ? palette.redBase : colors.formInputBorder)),
        // Wraps input and prefix/suffix
        inputWrapper: css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      label: input-inputWrapper;\n      position: relative;\n      flex-grow: 1;\n      /* we want input to be above addons, especially for focused state */\n      z-index: 1;\n\n      /* when input rendered with addon before only*/\n      &:not(:first-child):last-child {\n        > input {\n          border-left: none;\n          border-top-left-radius: 0;\n          border-bottom-left-radius: 0;\n        }\n      }\n\n      /* when input rendered with addon after only*/\n      &:first-child:not(:last-child) {\n        > input {\n          border-right: none;\n          border-top-right-radius: 0;\n          border-bottom-right-radius: 0;\n        }\n      }\n\n      /* when rendered with addon before and after */\n      &:not(:first-child):not(:last-child) {\n        > input {\n          border-right: none;\n          border-top-right-radius: 0;\n          border-bottom-right-radius: 0;\n          border-top-left-radius: 0;\n          border-bottom-left-radius: 0;\n        }\n      }\n\n      input {\n        /* paddings specified for classes used outside React component */\n        &:not(:first-child) {\n          padding-left: ", ";\n        }\n        &:not(:last-child) {\n          padding-right: ", ";\n        }\n        &[readonly] {\n          cursor: default;\n        }\n      }\n    "], ["\n      label: input-inputWrapper;\n      position: relative;\n      flex-grow: 1;\n      /* we want input to be above addons, especially for focused state */\n      z-index: 1;\n\n      /* when input rendered with addon before only*/\n      &:not(:first-child):last-child {\n        > input {\n          border-left: none;\n          border-top-left-radius: 0;\n          border-bottom-left-radius: 0;\n        }\n      }\n\n      /* when input rendered with addon after only*/\n      &:first-child:not(:last-child) {\n        > input {\n          border-right: none;\n          border-top-right-radius: 0;\n          border-bottom-right-radius: 0;\n        }\n      }\n\n      /* when rendered with addon before and after */\n      &:not(:first-child):not(:last-child) {\n        > input {\n          border-right: none;\n          border-top-right-radius: 0;\n          border-bottom-right-radius: 0;\n          border-top-left-radius: 0;\n          border-bottom-left-radius: 0;\n        }\n      }\n\n      input {\n        /* paddings specified for classes used outside React component */\n        &:not(:first-child) {\n          padding-left: ", ";\n        }\n        &:not(:last-child) {\n          padding-right: ", ";\n        }\n        &[readonly] {\n          cursor: default;\n        }\n      }\n    "])), prefixSuffixStaticWidth, prefixSuffixStaticWidth),
        input: cx(getFocusStyle(theme), sharedInputStyle(theme, invalid), css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n        label: input-input;\n        position: relative;\n        z-index: 0;\n        flex-grow: 1;\n        border-radius: ", ";\n        height: 100%;\n        width: 100%;\n      "], ["\n        label: input-input;\n        position: relative;\n        z-index: 0;\n        flex-grow: 1;\n        border-radius: ", ";\n        height: 100%;\n        width: 100%;\n      "])), borderRadius)),
        inputDisabled: css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n      background-color: ", ";\n      color: ", ";\n    "], ["\n      background-color: ", ";\n      color: ", ";\n    "])), colors.formInputBgDisabled, colors.formInputDisabledText),
        addon: css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n      label: input-addon;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex-grow: 0;\n      flex-shrink: 0;\n      position: relative;\n\n      &:first-child {\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n        > :last-child {\n          border-top-right-radius: 0;\n          border-bottom-right-radius: 0;\n        }\n      }\n\n      &:last-child {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n        > :first-child {\n          border-top-left-radius: 0;\n          border-bottom-left-radius: 0;\n        }\n      }\n      > *:focus {\n        /* we want anything that has focus and is an addon to be above input */\n        z-index: 2;\n      }\n    "], ["\n      label: input-addon;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex-grow: 0;\n      flex-shrink: 0;\n      position: relative;\n\n      &:first-child {\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n        > :last-child {\n          border-top-right-radius: 0;\n          border-bottom-right-radius: 0;\n        }\n      }\n\n      &:last-child {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n        > :first-child {\n          border-top-left-radius: 0;\n          border-bottom-left-radius: 0;\n        }\n      }\n      > *:focus {\n        /* we want anything that has focus and is an addon to be above input */\n        z-index: 2;\n      }\n    "]))),
        prefix: cx(prefixSuffix, css(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n        label: input-prefix;\n        padding-left: ", ";\n        padding-right: ", ";\n        border-right: none;\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n      "], ["\n        label: input-prefix;\n        padding-left: ", ";\n        padding-right: ", ";\n        border-right: none;\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n      "])), theme.spacing.sm, theme.spacing.xs)),
        suffix: cx(prefixSuffix, css(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n        label: input-suffix;\n        padding-right: ", ";\n        padding-left: ", ";\n        margin-bottom: -2px;\n        border-left: none;\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n        right: 0;\n      "], ["\n        label: input-suffix;\n        padding-right: ", ";\n        padding-left: ", ";\n        margin-bottom: -2px;\n        border-left: none;\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n        right: 0;\n      "])), theme.spacing.sm, theme.spacing.xs)),
        loadingIndicator: css(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n      & + * {\n        margin-left: ", ";\n      }\n    "], ["\n      & + * {\n        margin-left: ", ";\n      }\n    "])), theme.spacing.xs),
    };
});
export var Input = React.forwardRef(function (props, ref) {
    var className = props.className, addonAfter = props.addonAfter, addonBefore = props.addonBefore, prefix = props.prefix, suffix = props.suffix, invalid = props.invalid, loading = props.loading, _a = props.width, width = _a === void 0 ? 0 : _a, restProps = __rest(props, ["className", "addonAfter", "addonBefore", "prefix", "suffix", "invalid", "loading", "width"]);
    /**
     * Prefix & suffix are positioned absolutely within inputWrapper. We use client rects below to apply correct padding to the input
     * when prefix/suffix is larger than default (28px = 16px(icon) + 12px(left/right paddings)).
     * Thanks to that prefix/suffix do not overflow the input element itself.
     */
    var _b = __read(useClientRect(), 2), prefixRect = _b[0], prefixRef = _b[1];
    var _c = __read(useClientRect(), 2), suffixRect = _c[0], suffixRef = _c[1];
    var theme = useTheme();
    var styles = getInputStyles({ theme: theme, invalid: !!invalid, width: width });
    return (React.createElement("div", { className: cx(styles.wrapper, className) },
        !!addonBefore && React.createElement("div", { className: styles.addon }, addonBefore),
        React.createElement("div", { className: styles.inputWrapper },
            prefix && (React.createElement("div", { className: styles.prefix, ref: prefixRef }, prefix)),
            React.createElement("input", __assign({ ref: ref, className: styles.input }, restProps, { style: {
                    paddingLeft: prefixRect ? prefixRect.width : undefined,
                    paddingRight: suffixRect ? suffixRect.width : undefined,
                } })),
            (suffix || loading) && (React.createElement("div", { className: styles.suffix, ref: suffixRef },
                loading && React.createElement(Icon, { name: "fa fa-spinner", className: cx('fa-spin', styles.loadingIndicator) }),
                suffix))),
        !!addonAfter && React.createElement("div", { className: styles.addon }, addonAfter)));
});
Input.displayName = 'Input';
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9;
//# sourceMappingURL=Input.js.map