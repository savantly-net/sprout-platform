/**
 * This configuration file defines custom commands for the "rush" command-line.
 * For full documentation, please see https://rushjs.io
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/command-line.schema.json",

  /**
   * Custom "commands" introduce new verbs for the command-line.  To see the help for these
   * example commands, try "rush --help", "rush my-bulk-command --help", or
   * "rush my-global-command --help".
   */
  "commands": [
    {
      "commandKind": "bulk",
      "name": "npm:publish",
      "summary": "publish npm packages to registry",
      "description": "The npm:publish task in each project will be run. The versions should be bumped, and packages should be rebuilt prior to executing this command",
      "safeForSimultaneousRushProcesses": false,
      "enableParallelism": true,
      "ignoreMissingScript": true
    // 
    //   /**
    //    * When invoking shell scripts, Rush uses a heuristic to distinguish errors from warnings:
    //    * - If the shell script returns a nonzero process exit code, Rush interprets this as "one or more errors".
    //    * Error output is displayed in red, and it prevents Rush from attempting to process any downstream projects.
    //    * - If the shell script returns a zero process exit code but writes something to its stderr stream,
    //    * Rush interprets this as "one or more warnings". Warning output is printed in yellow, but does NOT prevent
    //    * Rush from processing downstream projects.
    //    *
    //    * Thus, warnings do not interfere with local development, but they will cause a CI job to fail, because
    //    * the Rush process itself returns a nonzero exit code if there are any warnings or errors. This is by design.
    //    * In an active monorepo, we've found that if you allow any warnings in your master branch, it inadvertently
    //    * teaches developers to ignore warnings, which quickly leads to a situation where so many "expected" warnings
    //    * have accumulated that warnings no longer serve any useful purpose.
    //    *
    //    * Sometimes a poorly behaved task will write output to stderr even though its operation was successful.
    //    * In that case, it's strongly recommended to fix the task.  However, as a workaround you can set
    //    * allowWarningsInSuccessfulBuild=true, which causes Rush to return a nonzero exit code for errors only.
    //    *
    //    * Note: The default value is false. In Rush 5.7.x and earlier, the default value was true.
    //    */
    //   "allowWarningsInSuccessfulBuild": false
    },
    {
      "name": "prettier",
      "commandKind": "global",
      "summary": "Used by the pre-commit Git hook. This command invokes Prettier to reformat staged changes.",

      "autoinstallerName": "rush-prettier",

      // This will invoke common/autoinstallers/rush-prettier/node_modules/.bin/pretty-quick
      "shellCommand": "prettier-eslint \"$PWD/backend/src/**/*{ts,tsx}\" ",
        "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "lint",
      "commandKind": "global",
      "summary": "Report linting errors",
      "shellCommand": "cd frontend/apps/webapp && npm run lint",
      "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "lint-fix",
      "commandKind": "global",
      "summary": "Try to automatically fix linting errors",
      "shellCommand": "cd frontend/apps/webapp && npm run lint-fix",
      "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "docs",
      "commandKind": "global",
      "summary": "Starts the Documentation Jekyll server",
      "shellCommand": "cd docs && bundle exec jekyll serve",
      "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "docs:deploy",
      "commandKind": "global",
      "summary": "Deploy the documentation site",
      "shellCommand": "./scripts/buildAndDeployDocs.sh",
      "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "start",
      "commandKind": "global",
      "summary": "Starts the front-end webapp",
      "shellCommand": "cd frontend/apps/webapp && npm run start",
      "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "start:web",
      "commandKind": "global",
      "summary": "Starts the front-end webapp",
      "shellCommand": "cd frontend/apps/webapp && npm run start",
      "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "start:server",
      "commandKind": "global",
      "summary": "Starts the backend-end server",
      "shellCommand": "./gradlew :sprout-server:dev",
      "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "start:db",
      "commandKind": "global",
      "summary": "Starts the postgres DB",
      "shellCommand": "docker compose -f backend/server/docker-compose.yml up",
      "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "start:dev",
      "commandKind": "global",
      "summary": "Starts a development server from the sprout-spring-boot-starter project that uses development mode features such as log levels and Spring devtools",
      "shellCommand": "./gradlew :sprout-spring-boot-starter:bootRun",
      "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "start:dev-watch",
      "commandKind": "global",
      "summary": "Continuously compiles the spring boot starter to trigger 'live reload' when using `start:dev`",
      "shellCommand": "./gradlew :sprout-spring-boot-starter:compileJava --continuous",
      "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "storybook",
      "commandKind": "global",
      "summary": "Build and start storybook",
      "shellCommand": "cd frontend/libs/ui && yarn storybook",
      "safeForSimultaneousRushProcesses": true
    },
    {
      "name": "storybook:deploy",
      "commandKind": "global",
      "summary": "Build and deploy the UI storybook",
      "shellCommand": "cd frontend/libs/ui && npx chromatic --project-token $CHROMATIC_PROJECT_TOKEN --auto-accept-changes --exit-once-uploaded",
      "safeForSimultaneousRushProcesses": true
    }
  ],

  /**
   * Custom "parameters" introduce new parameters for specified Rush command-line commands.
   * For example, you might define a "--production" parameter for the "rush build" command.
   */
  "parameters": [
    /** TODO:
    {
      "argumentName": "NAME",
      "shortName": "-n",
      "longName": "--name",
      "parameterKind": "string",
      "associatedCommands": ["plugin-create"],
      "description": "The name given to the new plugin. It should be all lowercase with dash separators",
      "required": true
    }
    */
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * A "flag" is a custom command-line parameter whose presence acts as an on/off switch.
    //    */
    //   "parameterKind": "flag",
    // 
    //   /**
    //    * (Required) The long name of the parameter.  It must be lower-case and use dash delimiters.
    //    */
    //   "longName": "--my-flag",
    // 
    //   /**
    //    * An optional alternative short name for the parameter.  It must be a dash followed by a single
    //    * lower-case or upper-case letter, which is case-sensitive.
    //    *
    //    * NOTE: The Rush developers recommend that automation scripts should always use the long name
    //    * to improve readability.  The short name is only intended as a convenience for humans.
    //    * The alphabet letters run out quickly, and are difficult to memorize, so *only* use
    //    * a short name if you expect the parameter to be needed very often in everyday operations.
    //    */
    //   "shortName": "-m",
    // 
    //   /**
    //    * (Required) A long description to be shown in the command-line help.
    //    *
    //    * Whenever you introduce commands/parameters, taking a little time to write meaningful
    //    * documentation can make a big difference for the developer experience in your repo.
    //    */
    //   "description": "A custom flag parameter that is passed to the scripts that are invoked when building projects",
    // 
    //   /**
    //    * (Required) A list of custom commands and/or built-in Rush commands that this parameter may
    //    * be used with.  The parameter will be appended to the shell command that Rush invokes.
    //    */
    //   "associatedCommands": ["build", "rebuild"]
    // },
    // 
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * A "string" is a custom command-line parameter whose value is a simple text string.
    //    */
    //   "parameterKind": "string",
    //   "longName": "--my-string",
    //   "description": "A custom string parameter for the \"my-global-command\" custom command",
    // 
    //   "associatedCommands": ["my-global-command"],
    // 
    //   /**
    //    * The name of the argument, which will be shown in the command-line help.
    //    *
    //    * For example, if the parameter name is '--count" and the argument name is "NUMBER",
    //    * then the command-line help would display "--count NUMBER".  The argument name must
    //    * be comprised of upper-case letters, numbers, and underscores.  It should be kept short.
    //    */
    //   "argumentName": "SOME_TEXT",
    // 
    //   /**
    //    * If true, this parameter must be included with the command.  The default is false.
    //    */
    //   "required": false
    // },
    // 
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * A "choice" is a custom command-line parameter whose argument must be chosen from a list of
    //    * allowable alternatives.
    //    */
    //   "parameterKind": "choice",
    //   "longName": "--my-choice",
    //   "description": "A custom choice parameter for the \"my-global-command\" custom command",
    // 
    //   "associatedCommands": ["my-global-command"],
    // 
    //   /**
    //    * If true, this parameter must be included with the command.  The default is false.
    //    */
    //   "required": false,
    // 
    //   /**
    //    * Normally if a parameter is omitted from the command line, it will not be passed
    //    * to the shell command. this value will be inserted by default.  Whereas if a "defaultValue"
    //    * is defined, the parameter will always be passed to the shell command, and will use the
    //    * default value if unspecified.  The value must be one of the defined alternatives.
    //    */
    //   "defaultValue": "vanilla",
    // 
    //   /**
    //    * (Required) A list of alternative argument values that can be chosen for this parameter.
    //    */
    //   "alternatives": [
    //     {
    //       /**
    //        * A token that is one of the alternatives that can be used with the choice parameter,
    //        * e.g. "vanilla" in "--flavor vanilla".
    //        */
    //       "name": "vanilla",
    // 
    //       /**
    //        * A detailed description for the alternative that can be shown in the command-line help.
    //        *
    //        * Whenever you introduce commands/parameters, taking a little time to write meaningful
    //        * documentation can make a big difference for the developer experience in your repo.
    //        */
    //       "description": "Use the vanilla flavor (the default)"
    //     },
    // 
    //     {
    //       "name": "chocolate",
    //       "description": "Use the chocolate flavor"
    //     },
    // 
    //     {
    //       "name": "strawberry",
    //       "description": "Use the strawberry flavor"
    //     }
    //   ]
    // }
  ]
}
